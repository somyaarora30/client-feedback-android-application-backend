{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf130
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red13\green0\blue129;\red235\green236\blue237;\red36\green38\blue41;
\red37\green127\blue159;\red104\green26\blue29;\red114\green121\blue129;\red43\green39\blue19;\red27\green29\blue31;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\deftab720
\pard\pardeftab720\sl320\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
public\cf4  \cf2 static\cf4  \cf2 class\cf4  \cf5 DetailsFragment\cf4  \cf2 extends\cf4  \cf5 Fragment\cf4  \
\{\
    \cf6 @Override\cf4 \
    \cf2 public\cf4  \cf5 View\cf4  onCreateView(\cf5 LayoutInflater\cf4  inflater, \cf5 ViewGroup\cf4  container,\cf5 Bundle\cf4  savedInstanceState) \
  \{\
        \cf2 if\cf4  (container == \cf2 null\cf4 ) \
        \{\
            \cf2 return\cf4  \cf2 null\cf4 ;\
        \}\
        \cf5 View\cf4  v = inflater.inflate(R.layout.my_view, \cf2 null\cf4 , \cf2 false\cf4 );\
        \cf2 final\cf4  \cf5 GestureDetector\cf4  gesture = \cf2 new\cf4  \cf5 GestureDetector\cf4 (getActivity(),\cf2 new\cf4  \cf5 GestureDetector\cf4 .\cf5 SimpleOnGestureListener\cf4 () \
        \{\
                \cf6 @Override\cf4 \
                \cf2 public\cf4  \cf2 boolean\cf4  onFling(\cf5 MotionEvent\cf4  e1, \cf5 MotionEvent\cf4  e2, \cf2 float\cf4  velocityX,\
                    \cf2 float\cf4  velocityY) \
               \{\
\
                    \cf2 final\cf4  \cf2 int\cf4  SWIPE_MIN_DISTANCE = \cf6 120\cf4 ;\
                    \cf2 final\cf4  \cf2 int\cf4  SWIPE_MAX_OFF_PATH = \cf6 250\cf4 ;\
                    \cf2 final\cf4  \cf2 int\cf4  SWIPE_THRESHOLD_VELOCITY = \cf6 200\cf4 ;\
                    \cf2 try\cf4  \
                   \{\
                        \cf2 if\cf4  (\cf5 Math\cf4 .abs(e1.getY() - e2.getY()) > SWIPE_MAX_OFF_PATH)\
                            \cf2 return\cf4  \cf2 false\cf4 ;\
                        \cf2 if\cf4  (e1.getX() - e2.getX() > SWIPE_MIN_DISTANCE\
                            && \cf5 Math\cf4 .abs(velocityX) > SWIPE_THRESHOLD_VELOCITY) \
                        \{\
                            \cf5 Log\cf4 .i(\cf5 Constants\cf4 .APP_TAG, \cf6 "Right to Left"\cf4 );\
                        \} \cf2 else\cf4  \cf2 if\cf4  (e2.getX() - e1.getX() > SWIPE_MIN_DISTANCE\
                            && \cf5 Math\cf4 .abs(velocityX) > SWIPE_THRESHOLD_VELOCITY) \
                        \{\
                            \cf5 Log\cf4 .i(\cf5 Constants\cf4 .APP_TAG, \cf6 "Left to Right"\cf4 );\
                            \
                        \}\
                   \} \cf2 catch\cf4  (\cf5 Exception\cf4  e) \
                     \{\
                        \cf7 // nothing\cf4 \
                     \}\
                    \cf2 return\cf4  \cf2 super\cf4 .onFling(e1, e2, velocityX, velocityY);\
                \}\
          \});\
\
        v.setOnTouchListener(\cf2 new\cf4  \cf5 View\cf4 .\cf5 OnTouchListener\cf4 () \
       \{\
            \cf6 @Override\cf4 \
            \cf2 public\cf4  \cf2 boolean\cf4  onTouch(\cf5 View\cf4  v, \cf5 MotionEvent\cf4  \cf2 event\cf4 ) \
            \{\
                \cf2 return\cf4  gesture.onTouchEvent(\cf2 event\cf4 );\
            \}\
        \});\
\
        \cf2 return\cf4  v;\
   \}\
\}\cf8 \
\pard\pardeftab720\sl240\partightenfactor0

\f1 \cf9 \cb1 \
}